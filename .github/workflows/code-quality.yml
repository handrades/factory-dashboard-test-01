name: 📊 Code Quality Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # TypeScript Code Quality
  typescript-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript strict check
        run: |
          # Check with strictest settings
          echo "Checking TypeScript with strict settings..."
          npx tsc -b config/tsconfig.json --noEmit --strict

      - name: 📊 Code complexity analysis
        run: |
          # Install complexity analysis tools
          npm install -g typescript-complexity-analyzer
          npx tsc-analyzer src/ --threshold 10 || true

  # Code Coverage and Testing
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage (Frontend)
        run: |
          # Add test coverage for frontend if tests exist
          if [ -f "jest.config.js" ] || grep -q '"test"' package.json; then
            npm test -- --coverage --watchAll=false
          else
            echo "No frontend tests configured"
          fi

      - name: 🧪 Run backend service tests
        run: |
          for service in services/*/; do
            if [ -f "$service/package.json" ]; then
              echo "Testing $service"
              cd "$service"
              if [ -f "jest.config.js" ] || grep -q '"test"' package.json; then
                npm ci
                npm test
              else
                echo "No tests found for $service"
              fi
              cd - > /dev/null
            fi
          done

  # Dependency Analysis
  dependency-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Dependency vulnerabilities
        run: |
          # Check for vulnerabilities
          npm audit --audit-level=low --json > audit-results.json || true
          
          # Install dependency analysis tools
          npm install -g npm-check-updates depcheck

      - name: 📊 Outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          ncu --format group
          
          # Check for unused dependencies
          echo "Checking for unused dependencies..."
          npx depcheck --json > depcheck-results.json || true

      - name: 📊 Bundle size analysis
        run: |
          # Build and analyze bundle size
          npm run build
          
          # Install bundle analyzer
          npm install -g webpack-bundle-analyzer
          
          # Generate bundle stats (if webpack is used)
          if [ -f "webpack.config.js" ] || [ -f "vite.config.ts" ]; then
            echo "Bundle analysis would go here"
            # This would need to be configured based on your build tool
          fi

  # Code Quality Metrics
  sonarcloud-analysis:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          # Full history for better analysis
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Generate test coverage
        run: |
          # Generate coverage reports for SonarCloud
          if [ -f "jest.config.js" ] || grep -q '"test"' package.json; then
            npm test -- --coverage --watchAll=false --coverageReporters=lcov || true
          fi

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=handrades_factory-dashboard-test-01
            -Dsonar.organization=handrades
            -Dsonar.sources=src/,services/
            -Dsonar.tests=src/,services/,tests/
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=coverage/test-reporter.xml
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/node_modules/**

  # Performance Analysis
  performance-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build

      - name: 📊 Bundle analysis
        run: |
          # Install bundle analysis tools
          npm install -g bundlesize
          
          # Analyze bundle sizes
          echo "Analyzing bundle sizes..."
          ls -la dist/ || ls -la build/ || echo "No build directory found"

      - name: 🚀 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouse-ci.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Documentation Quality
  docs-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📥 Install documentation tools
        run: |
          pip install mkdocs mkdocs-material
          npm install -g documentation

      - name: 📊 Generate API documentation
        run: |
          # Generate TypeScript API docs
          npx typedoc src/ --out docs/api --theme minimal

      - name: 🔍 Documentation coverage
        run: |
          # Check for missing documentation
          echo "Checking documentation coverage..."
          find src/ -name "*.ts" -not -name "*.test.ts" -not -name "*.spec.ts" | while read file; do
            if ! grep -q "@param\|@returns\|@description\|/\*\*" "$file"; then
              echo "Missing documentation: $file"
            fi
          done

  # Code Quality Summary
  quality-summary:
    runs-on: ubuntu-latest
    needs: [typescript-quality, test-coverage, dependency-analysis, performance-analysis, docs-quality]
    if: always()
    steps:
      - name: 📊 Generate quality report
        run: |
          echo "## 📊 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.typescript-quality.result }}" == "success" ]]; then
            echo "✅ TypeScript Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TypeScript Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-coverage.result }}" == "success" ]]; then
            echo "✅ Test Coverage: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test Coverage: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-analysis.result }}" == "success" ]]; then
            echo "✅ Dependency Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.performance-analysis.result }}" == "success" ]]; then
            echo "✅ Performance Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docs-quality.result }}" == "success" ]]; then
            echo "✅ Documentation Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi